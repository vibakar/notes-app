name: Deploy to ECS via CodeDeploy

on:
  workflow_dispatch: {}
  # push:
  #   branches:
  # - main # or your release branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'eu-west-2' }}

      - name: Upload AppSpec and TaskDef to S3
        run: |
          aws s3 cp appspec.yaml s3://artefacts-648378716943/appspec.yaml

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name notes-app-frontend \
            --deployment-group-name frontend-bluegreen-dg \
            --s3-location bucket=artefacts-648378716943,bundleType=YAML,key=appspec.yaml \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Triggered by GitHub Actions"
      - name: sleep
        run: |
          sleep 300  #5 minutes

  Update-test-listener:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'eu-west-2' }}

      - name: update-test-listener
        run: |
          ALB_NAME="notes-app-alb"
          BLUE_TARGET_GROUP_NAME="frontend-blue-tg"
          GREEN_TARGET_GROUP_NAME="frontend-green-tg"

          ALB_ARN=$(aws elbv2 describe-load-balancers \
            --names "${ALB_NAME}" \
            --query "LoadBalancers[0].LoadBalancerArn" \
            --output text)

          BLUE_TG_ARN=$(aws elbv2 describe-target-groups \
            --names "${BLUE_TARGET_GROUP_NAME}" \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)

          GREEN_TG_ARN=$(aws elbv2 describe-target-groups \
            --names "${GREEN_TARGET_GROUP_NAME}" \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)

          PROD_LISTENER_ARN=$(aws elbv2 describe-listeners \
            --load-balancer-arn "${ALB_ARN}" \
            --query "Listeners[?Port==\`80\`].ListenerArn" \
            --output text)

          # Determine which TG is currently attached to the prod listener rule
          CURRENT_PROD_RULE_TG_ARN=$(aws elbv2 describe-rules \
            --listener-arn "${PROD_LISTENER_ARN}" \
            --query "Rules[?Priority=='100'].Actions[0].TargetGroupArn | [0]" \
            --output text)

          echo "Current prod target group is -> ${CURRENT_PROD_RULE_TG_ARN}"

          if [ "${CURRENT_PROD_RULE_TG_ARN}" == "${BLUE_TG_ARN}" ]; then
            PREVIEW_TG=${GREEN_TG_ARN}
          else
            PREVIEW_TG=${BLUE_TG_ARN}
          fi

          # TODO: GET TEST RULE ARN
          echo "Update test listener rule target group to -> ${PREVIEW_TG}"
          aws elbv2 modify-rule \
          --rule-arn arn:aws:elasticloadbalancing:eu-west-2:648378716943:listener-rule/app/notes-app-alb/52d948181b7b5aa6/c73ec4fe0e68d1e8/fb07aad5946b7861 \
          --actions Type=forward,TargetGroupArn="${PREVIEW_TG}"
